# -*- coding: utf-8 -*-
"""Online -Retail3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w1jbLhkKEp-xF90SkQJvKA7Jx7vWrAey
"""

# importing all the nesasary Library
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.preprocessing import StandardScaler

# Setting to make numbers easier to read on display
pd.options.display.float_format = '{:20.2f}'.format

# Show all columns on output
pd.set_option('display.max_columns', 999)

df = pd.read_excel("/content/drive/MyDrive/Retail data /online_retail_II.xlsx",sheet_name=0)

"""# New Section"""

df.head(10)

df.info()

df.describe()

df.describe(include='O')

df[df["Customer ID"].isna()].head(10)

df[df["Quantity"] < 0].head(10)

df["Invoice"] = df["Invoice"].astype(str)
df[df["Invoice"].str.match("^\\d{6}") == False]

df["Invoice"].str.replace("[0-9]", "", regex=True).unique()

df[df["Invoice"].str.startswith("A")]

df["StockCode"] = df["StockCode"].astype("str")
df[(df["StockCode"].str.match("^\\d{5}$") == False) & (df["StockCode"].str.match("^\\d{5}[a-zA-Z]+$") == False)]["StockCode"].unique()

df[df['StockCode'].str.contains("^DOT")]

df.head(10)

"""**Data Cleaning**"""

cleaned_df = df.copy()

cleaned_df["Invoice"] = cleaned_df["Invoice"].astype("str")
mask =(
    cleaned_df["Invoice"].str.match("^\\d{6}$") == True

    )
cleaned_df  = cleaned_df[mask]
cleaned_df.head(10)

cleaned_df.describe()

len(cleaned_df[cleaned_df["Price"] ==0])

celaned_df  = cleaned_df[cleaned_df["Price"] > 0]

cleaned_df.describe()

cleaned_df["Price"].min()

len(cleaned_df)/len(df)

#Droping about 23% of recored during cleaning

"""**Feature Engineering**"""

cleaned_df["SalesLineTotal"] = cleaned_df["Quantity"] * cleaned_df["Price"]
cleaned_df

max_invoice_date = aggregated_df["Recency"].max() # Changed "LastInvoiceDate" to "Recency"

aggregated_df["Recency"] = (max_invoice_date - aggregated_df["Recency"]).dt.days # Changed "LastInvoiceDate" to "Recency"

aggregated_df.head(5)

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.hist(aggregated_df['MonetaryValue'], bins=10, color='skyblue', edgecolor='black')
plt.title('Monetary Value Distribution')
plt.xlabel('Monetary Value')
plt.ylabel('Count')

plt.subplot(1, 3, 2)
plt.hist(aggregated_df['Frequency'], bins=10, color='lightgreen', edgecolor='black')
plt.title('Frequency Distribution')
plt.xlabel('Frequency')
plt.ylabel('Count')

plt.subplot(1, 3, 3)
plt.hist(aggregated_df['Recency'], bins=20, color='salmon', edgecolor='black')
plt.title('Recency Distribution')
plt.xlabel('Recency')
plt.ylabel('Count')

plt.tight_layout()
plt.show()

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
sns.boxplot(data=aggregated_df['MonetaryValue'], color='skyblue')
plt.title('Monetary Value Boxplot')
plt.xlabel('Monetary Value')

plt.subplot(1, 3, 2)
sns.boxplot(data=aggregated_df['Frequency'], color='lightgreen')
plt.title('Frequency Boxplot')
plt.xlabel('Frequency')

plt.subplot(1, 3, 3)
sns.boxplot(data=aggregated_df['Recency'], color='salmon')
plt.title('Recency Boxplot')
plt.xlabel('Recency')

plt.tight_layout()
plt.show()

M_Q1 = aggregated_df["MonetaryValue"].quantile(0.25)
M_Q3 = aggregated_df["MonetaryValue"].quantile(0.75)
M_IQR = M_Q3 - M_Q1

monetary_outliers_df = aggregated_df[(aggregated_df["MonetaryValue"] > (M_Q3 + 1.5 * M_IQR)) | (aggregated_df["MonetaryValue"] < (M_Q1 - 1.5 * M_IQR))].copy()

monetary_outliers_df.describe()

F_Q1 = aggregated_df['Frequency'].quantile(0.25)
F_Q3 = aggregated_df['Frequency'].quantile(0.75)
F_IQR = F_Q3 - F_Q1

frequency_outliers_df = aggregated_df[(aggregated_df['Frequency'] > (F_Q3 + 1.5 * F_IQR)) | (aggregated_df['Frequency'] < (F_Q1 - 1.5 * F_IQR))].copy()

frequency_outliers_df.describe()

non_outliers_df = aggregated_df[(~aggregated_df.index.isin(monetary_outliers_df.index)) & (~aggregated_df.index.isin(frequency_outliers_df.index))]

non_outliers_df.describe()

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
sns.boxplot(data=non_outliers_df['MonetaryValue'], color='skyblue')
plt.title('Monetary Value Boxplot')
plt.xlabel('Monetary Value')

plt.subplot(1, 3, 2)
sns.boxplot(data=non_outliers_df['Frequency'], color='lightgreen')
plt.title('Frequency Boxplot')
plt.xlabel('Frequency')

plt.subplot(1, 3, 3)
sns.boxplot(data=non_outliers_df['Recency'], color='salmon')
plt.title('Recency Boxplot')
plt.xlabel('Recency')

plt.tight_layout()
plt.show()

# Convert 'Recency' column to numerical representation (e.g., days since a reference date)
!pip install pandas

import pandas as pd

# Assuming 'Recency' is a datetime column
reference_date = pd.to_datetime('2023-01-01') # Replace with a suitable reference date

# Convert 'Recency' column to datetime if it's not already
non_outliers_df['Recency'] = pd.to_datetime(non_outliers_df['Recency'])

non_outliers_df['Recency_Numeric'] = (non_outliers_df['Recency'] - reference_date).dt.days

fig = plt.figure(figsize=(8, 8))

ax = fig.add_subplot(projection="3d")

# Use the new numerical Recency column for the scatter plot
scatter = ax.scatter(non_outliers_df["MonetaryValue"], non_outliers_df["Frequency"], non_outliers_df["Recency_Numeric"])

ax.set_xlabel('Monetary Value')
ax.set_ylabel('Frequency')
ax.set_zlabel('Recency (Days since 2023-01-01)') # Update the label

ax.set_title('3D Scatter Plot of Customer Data')

plt.show()

fig = plt.figure(figsize=(8, 8))

ax = fig.add_subplot(projection="3d")


scatter = ax.scatter(non_outliers_df["MonetaryValue"], non_outliers_df["Frequency"], non_outliers_df["Recency_Numeric"])

ax.set_xlabel('Monetary Value')
ax.set_ylabel('Frequency')
ax.set_zlabel('Recency')

ax.set_title('3D Scatter Plot of Customer Data')

plt.show()

scaler = StandardScaler()

# Use the numerical Recency column created in the previous step
scaled_data = scaler.fit_transform(non_outliers_df[["MonetaryValue", "Frequency", "Recency_Numeric"]])

scaled_data

scaled_data_df = pd.DataFrame(scaled_data, index=non_outliers_df.index, columns=("MonetaryValue", "Frequency", "Recency"))

scaled_data_df

fig = plt.figure(figsize=(8, 8))

ax = fig.add_subplot(projection="3d")

scatter = ax.scatter(scaled_data_df["MonetaryValue"], scaled_data_df["Frequency"], scaled_data_df["Recency"])

ax.set_xlabel('Monetary Value')
ax.set_ylabel('Frequency')
ax.set_zlabel('Recency')

ax.set_title('3D Scatter Plot of Customer Data')

plt.show()

"""**KMeans Cluster**"""

!pip install scikit-learn
import sklearn.metrics

max_k = 12

inertia = []
silhoutte_scores = []
k_values = range(2, max_k + 1)

for k in k_values:

    kmeans = KMeans(n_clusters=k, random_state=42, max_iter=1000)

    cluster_labels = kmeans.fit_predict(scaled_data_df)

    # Call the silhouette_score function from sklearn.metrics
    sil_score = sklearn.metrics.silhouette_score(scaled_data_df, cluster_labels)

    silhoutte_scores.append(sil_score)

    inertia.append(kmeans.inertia_)

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(k_values, inertia, marker='o')
plt.title('KMeans Inertia for Different Values of k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Inertia')
plt.xticks(k_values)
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(k_values, silhoutte_scores, marker='o', color='orange')
plt.title('Silhouette Scores for Different Values of k')
plt.xlabel('Number of Clusters (k)')
plt.ylabel('Silhouette Score')
plt.xticks(k_values)
plt.grid(True)

plt.tight_layout()
plt.show()

kmeans = KMeans(n_clusters=4, random_state=42, max_iter=1000)

cluster_labels = kmeans.fit_predict(scaled_data_df)

cluster_labels

non_outliers_df["Cluster"] = cluster_labels

non_outliers_df

from google.colab import sheets
sheet = sheets.InteractiveSheet(df=non_outliers_df)

# prompt: Using dataframe non_outliers_df: 3 D Scatter Plot of Customer Data by Cluster

import plotly.express as px

# Create the 3D scatter plot using Plotly Express
fig = px.scatter_3d(
    non_outliers_df,
    x="MonetaryValue",
    y="Frequency",
    z="Recency_Numeric",
    color="Cluster",  # Color points by cluster
    title="3D Scatter Plot of Customer Data by Cluster",
    labels={
        "MonetaryValue": "Monetary Value",
        "Frequency": "Frequency",
        "Recency_Numeric": "Recency (Numeric)",
        "Cluster": "Cluster",
    },
)

fig.show()

!pip install seaborn
import seaborn as sns
import matplotlib.pyplot as plt

# Define cluster_colors with your desired color palette
cluster_colors = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728"]  # Example palette

plt.figure(figsize=(12, 18))

plt.subplot(3, 1, 1)
sns.violinplot(x=non_outliers_df['Cluster'], y=non_outliers_df['MonetaryValue'], palette=cluster_colors, hue=non_outliers_df["Cluster"])
sns.violinplot(y=non_outliers_df['MonetaryValue'], color='gray', linewidth=1.0)
plt.title('Monetary Value by Cluster')
plt.ylabel('Monetary Value')

plt.subplot(3, 1, 2)
sns.violinplot(x=non_outliers_df['Cluster'], y=non_outliers_df['Frequency'], palette=cluster_colors, hue=non_outliers_df["Cluster"])
sns.violinplot(y=non_outliers_df['Frequency'], color='gray', linewidth=1.0)
plt.title('Frequency by Cluster')
plt.ylabel('Frequency')


plt.subplot(3, 1, 3)
sns.violinplot(x=non_outliers_df['Cluster'], y=non_outliers_df['Recency'], palette=cluster_colors, hue=non_outliers_df["Cluster"])
sns.violinplot(y=non_outliers_df['Recency'], color='gray', linewidth=1.0)
plt.title('Recency by Cluster')
plt.ylabel('Recency')

plt.tight_layout()
plt.show()

overlap_indices = monetary_outliers_df.index.intersection(frequency_outliers_df.index)

monetary_only_outliers = monetary_outliers_df.drop(overlap_indices)
frequency_only_outliers = frequency_outliers_df.drop(overlap_indices)
monetary_and_frequency_outliers = monetary_outliers_df.loc[overlap_indices]

monetary_only_outliers["Cluster"] = -1
frequency_only_outliers["Cluster"] = -2
monetary_and_frequency_outliers["Cluster"] = -3

outlier_clusters_df = pd.concat([monetary_only_outliers, frequency_only_outliers, monetary_and_frequency_outliers])

outlier_clusters_df



!pip install seaborn matplotlib

import seaborn as sns
import matplotlib.pyplot as plt

# Define cluster_colors with your desired color palette
cluster_colors = ["red", "blue", "green", "orange"] # Example palette

plt.figure(figsize=(12, 18))

plt.subplot(3, 1, 1)
sns.violinplot(x=non_outliers_df['Cluster'], y=non_outliers_df['MonetaryValue'], palette=cluster_colors, hue=non_outliers_df["Cluster"])
sns.violinplot(y=non_outliers_df['MonetaryValue'], color='gray', linewidth=1.0)
plt.title('Monetary Value by Cluster')
plt.ylabel('Monetary Value')

plt.subplot(3, 1, 2)
sns.violinplot(x=non_outliers_df['Cluster'], y=non_outliers_df['Frequency'], palette=cluster_colors, hue=non_outliers_df["Cluster"])
sns.violinplot(y=non_outliers_df['Frequency'], color='gray', linewidth=1.0)
plt.title('Frequency by Cluster')
plt.ylabel('Frequency')


plt.subplot(3, 1, 3)
sns.violinplot(x=non_outliers_df['Cluster'], y=non_outliers_df['Recency'], palette=cluster_colors, hue=non_outliers_df["Cluster"])
sns.violinplot(y=non_outliers_df['Recency'], color='gray', linewidth=1.0)
plt.title('Recency by Cluster')
plt.ylabel('Recency')

plt.tight_layout()
plt.show()

cluster_colors = {-1: '#9467bd',
                  -2: '#8c564b',
                  -3: '#e377c2'}

plt.figure(figsize=(12, 18))

plt.subplot(3, 1, 1)
sns.violinplot(x=outlier_clusters_df['Cluster'], y=outlier_clusters_df['MonetaryValue'], palette=cluster_colors, hue=outlier_clusters_df["Cluster"])
sns.violinplot(y=outlier_clusters_df['MonetaryValue'], color='gray', linewidth=1.0)
plt.title('Monetary Value by Cluster')
plt.ylabel('Monetary Value')

plt.subplot(3, 1, 2)
sns.violinplot(x=outlier_clusters_df['Cluster'], y=outlier_clusters_df['Frequency'], palette=cluster_colors, hue=outlier_clusters_df["Cluster"])
sns.violinplot(y=outlier_clusters_df['Frequency'], color='gray', linewidth=1.0)
plt.title('Frequency by Cluster')
plt.ylabel('Frequency')

plt.subplot(3, 1, 3)
sns.violinplot(x=outlier_clusters_df['Cluster'], y=outlier_clusters_df['Recency'], palette=cluster_colors, hue=outlier_clusters_df["Cluster"])
sns.violinplot(y=outlier_clusters_df['Recency'], color='gray', linewidth=1.0)
plt.title('Recency by Cluster')
plt.ylabel('Recency')

plt.tight_layout()
plt.show()

"""Cluster -1 (Monetary Outliers) PAMPER: Characteristics: High spenders but not necessarily frequent buyers. Their purchases are large but infrequent. Potential Strategy: Focus on maintaining their loyalty with personalized offers or luxury services that cater to their high spending capacity.

Cluster -2 (Frequency Outliers) UPSELL: Characteristics: Frequent buyers who spend less per purchase. These customers are consistently engaged but might benefit from upselling opportunities. Potential Strategy: Implement loyalty programs or bundle deals to encourage higher spending per visit, given their frequent engagement.

### Cluster -3 (Monetary & Frequency Outliers) DELIGHT: Characteristics: The most valuable outliers, with extreme spending and frequent purchases. They are likely your top-tier customers who require special attention. Potential Strategy: Develop VIP programs or exclusive offers to maintain their loyalty and encourage continued engagement.bold text
"""



cluster_lebels = {
    0: "RETAIN",
    1: "RE-ENGAGE",
    2: "NURTURE",
    3: "REWAED",
    -1: 'PAMPER',
    -2: "UPSELL",
    -3:"DELIGHT"
}

full_clusering_df = pd.concat([non_outliers_df, outlier_clusters_df])

full_clusering_df

full_clustering_df = pd.concat([non_outliers_df, outlier_clusters_df]) # make sure you have defined non_outliers_df and outlier_clusters_df in previous steps

full_clustering_df # Now the variable is defined with the correct spelling

"""Visualisation"""

!pip install pandas

import pandas as pd

# Convert 'Recency' column to numeric type if it contains Timestamps
full_clustering_df['Recency'] = pd.to_numeric(full_clustering_df['Recency'], errors='coerce')

cluster_counts = full_clustering_df['Customer ID'].value_counts() # 'Customer ID' is one of the existing columns in the DataFrame.
full_clustering_df["MonetaryValue per 100 pounds"] = full_clustering_df['MonetaryValue'] / 100.00 # Removed extra spaces from column name
# It's not clear from the user's code how the 'ClusterLabel' is supposed to be calculated so I cannot suggest a fix for this
feature_means = full_clustering_df.groupby('Customer ID')[['Recency','Frequency','MonetaryValue per 100 pounds']].mean() # Replacing 'ClusterLabel' with an existing column

fig, ax1 = plt.subplots(figsize=(12, 8))
sns.barplot(x=cluster_counts.index, y=cluster_counts.values, ax=ax1, palette='viridis', hue=cluster_counts.index)
ax1.set_ylabel('Number of Customers', color='b')
ax1.set_title('Cluster Distribution with Average Feature Values')

ax2 = ax1.twinx()

sns.lineplot(data=feature_means, ax=ax2, palette='Set2', marker='o')
ax2.set_ylabel('Average Value', color='g')

plt.show()